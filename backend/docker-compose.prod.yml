# Production Docker Compose configuration

services:
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY}/backend:latest
    container_name: mch_backend_prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://backend_user:${POSTGRES_PASSWORD}@postgres:5432/backend_db
      - DATABASE_ECHO=false
      - DATABASE_AUTO_CREATE=false
      - DEBUG=false
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_SECURE=false
      - MINIO_BUCKET=files
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - mch_network

  postgres:
    image: postgres:15-alpine
    container_name: mch_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: backend_db
      POSTGRES_USER: backend_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U backend_user -d backend_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mch_network

  minio:
    image: minio/minio:latest
    container_name: mch_minio_prod
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_REGION: us-east-1
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - mch_network


volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  mch_network:
    driver: bridge
