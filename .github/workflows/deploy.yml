name: Deploy to Production

on:
  push:
    branches: [ main, feat/cicd ]  # 添加測試分支
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feat/cicd') && github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      timeout-minutes: 5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      timeout-minutes: 5

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      timeout-minutes: 5
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      timeout-minutes: 2
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        docker system prune -af

    - name: Build and push Docker image (Simple)
      uses: docker/build-push-action@v5
      timeout-minutes: 15
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        no-cache: true

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feat/cicd') && github.event_name == 'push'
    permissions:
      contents: read
      packages: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      timeout-minutes: 5

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      timeout-minutes: 10
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        command_timeout: 600s
        script: |
          # Navigate to deployment directory
          cd /opt/mch-backend

          # Pull latest changes from the current branch
          git pull origin ${{ github.ref_name }}

          # Set environment variables
          export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          export MINIO_ACCESS_KEY="${{ secrets.MINIO_ACCESS_KEY }}"
          export MINIO_SECRET_KEY="${{ secrets.MINIO_SECRET_KEY }}"
          export GITHUB_REPOSITORY="${{ github.repository }}"

          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Pull latest images
          env GITHUB_REPOSITORY="${{ github.repository }}" POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" MINIO_ACCESS_KEY="${{ secrets.MINIO_ACCESS_KEY }}" MINIO_SECRET_KEY="${{ secrets.MINIO_SECRET_KEY }}" docker-compose -f backend/docker-compose.prod.yml pull

          # Run database migrations
          env GITHUB_REPOSITORY="${{ github.repository }}" POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" MINIO_ACCESS_KEY="${{ secrets.MINIO_ACCESS_KEY }}" MINIO_SECRET_KEY="${{ secrets.MINIO_SECRET_KEY }}" docker-compose -f backend/docker-compose.prod.yml run --rm backend uv run alembic upgrade head

          # Deploy with zero downtime
          env GITHUB_REPOSITORY="${{ github.repository }}" POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" MINIO_ACCESS_KEY="${{ secrets.MINIO_ACCESS_KEY }}" MINIO_SECRET_KEY="${{ secrets.MINIO_SECRET_KEY }}" docker-compose -f backend/docker-compose.prod.yml up -d

          # Clean up old images
          docker image prune -f

          # Health check
          sleep 30
          curl -f http://localhost:8000/api/v1/health || exit 1

          echo "Deployment completed successfully!"
